// function play() {
//   const record = document.querySelector(('.record'));
// const stop = document.querySelector(('.stop'));
// const soundClips = document.querySelector(('.sound-clips'));
// const canvas = document.querySelector(('.visualizer'));
// const mainSection = document.querySelector(('.main-controls'));

// stop.disabled = true;

// let audioCtx;
// const canvasCtx = canvas.getContext("2d");

// if (navigator.mediaDevices.getUserMedia) {
//   console.log('getUserMedia supported.');

//   const constraints = { audio: true };
//   let chunks = [];

//   let onSuccess = function(stream) {
//     const mediaRecorder = new MediaRecorder(stream);

//     visualize(stream);

//     record.onclick = function() {
//       mediaRecorder.start();
//       console.log(mediaRecorder.state);
//       console.log("recorder started");
//       record.style.background = "red";

//       stop.disabled = false;
//       record.disabled = true;
//     }

//     stop.onclick = function() {
//       mediaRecorder.stop();
//       console.log(mediaRecorder.state);
//       console.log("recorder stopped");
//       record.style.background = "";
//       record.style.color = "";
//       // mediaRecorder.requestData();

//       stop.disabled = true;
//       record.disabled = false;
//     }

//     mediaRecorder.onstop = function(e) {
//       console.log("data available after MediaRecorder.stop() called.");

//       const clipName = prompt('Enter a name for your sound clip?','My unnamed clip');

//       const clipContainer = document.createElement('article');
//       const clipLabel = document.createElement('p');
//       const audio = document.createElement('audio');
//       // const deleteButton = document.createElement('button');

//       clipContainer.classList.add('clip');
//       audio.setAttribute('controls', '');
//       // deleteButton.textContent = 'Delete';
//       // deleteButton.className = 'delete';

//       if(clipName === null) {
//         clipLabel.textContent = 'My unnamed clip';
//       } else {
//         clipLabel.textContent = clipName;
//       }

//       clipContainer.appendChild(audio);
//       clipContainer.appendChild(clipLabel);
//       // clipContainer.appendChild(deleteButton);
//       soundClips.appendChild(clipContainer);

//       audio.controls = true;
//       const blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' });
//       chunks = [];
//       const audioURL = window.URL.createObjectURL(blob);
//       audio.src = audioURL;
//       console.log("recorder stopped");

//       // deleteButton.onclick = function(e: any) {
//       //   let evtTgt = e.target;
//       //   evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);
//       // }

//       clipLabel.onclick = function() {
//         const existingName = clipLabel.textContent;
//         const newClipName = prompt('Enter a new name for your sound clip?');
//         if(newClipName === null) {
//           clipLabel.textContent = existingName;
//         } else {
//           clipLabel.textContent = newClipName;
//         }
//       }
//     }

//     mediaRecorder.ondataavailable = function(e) {
//       chunks.push(e.data);
//     }
//   }

//   let onError = function(err) {
//     console.log('The following error occured: ' + err);
//   }

//   navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);

// } else {
//    console.log('getUserMedia not supported on your browser!');
// }

// function visualize(stream) {
//   if(!audioCtx) {
//     audioCtx = new AudioContext();
//   }

//   const source = audioCtx.createMediaStreamSource(stream);

//   const analyser = audioCtx.createAnalyser();
//   analyser.fftSize = 2048;
//   const bufferLength = analyser.frequencyBinCount;
//   const dataArray = new Uint8Array(bufferLength);

//   source.connect(analyser);
//   //analyser.connect(audioCtx.destination);

//   draw()

//   function draw() {
//     const WIDTH = canvas.width
//     const HEIGHT = canvas.height;

//     requestAnimationFrame(draw);

//     analyser.getByteTimeDomainData(dataArray);

//     canvasCtx.fillStyle = 'rgb(200, 200, 200)';
//     canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);

//     canvasCtx.lineWidth = 2;
//     canvasCtx.strokeStyle = 'rgb(0, 0, 0)';

//     canvasCtx.beginPath();

//     let sliceWidth = WIDTH * 1.0 / bufferLength;
//     let x = 0;


//     for(let i = 0; i < bufferLength; i++) {

//       let v = dataArray[i] / 128.0;
//       let y = v * HEIGHT/2;





//       if(i === 0) {
//         canvasCtx.moveTo(x, y);
//       } else {
//         canvasCtx.lineTo(x, y);
//       }

//       x += sliceWidth;
//     }

//     canvasCtx.lineTo(canvas.width, canvas.height/2);
//     canvasCtx.stroke();

//   }
// }

// window.onresize = function() {
//   canvas.width = mainSection.offsetWidth;
// }

// window.onresize();
// }














/* Analyzer **                                  **/
/* Analyzer **                                  **/
/* Analyzer **                                  **/
/* Analyzer **                                  **/
/* Analyzer **                                  **/
/* Analyzer **                                  **/
// Master volume in decibels
// const volume = -12;

// let player, analyser;

// let playing = false;

// // Store the amplitudes so we can smoothly interpolate them
// let amplitudes;

// // Create a new canvas to the browser size
// async function setup () {
//   // p5.createCanvas(p5.windowWidth, p5.windowHeight);
  
//   // Clear with black on setup
//   // background(0);

//   // Make the volume quieter
//   Tone.Master.volume.value = volume;

//    // We can use 'player' to play MP3 files
//   player = new Tone.Player();
//   // player.loop = true;
//   player.autostart = false;
//   player.connect(actxTone);
//   // player.connect(Tone.Master);
  
//   // Load and "await" the MP3 file
//   await player.load(actxTone);
  
//   // Create an analyser node that makes a waveform
//   analyser = new Tone.Analyser('fft', 1024);
  
  
//   // Create a new list of amplitudes filled with 0s
//   amplitudes = new Array(analyser.size).fill(0);
  
//   // Connect with analyser as well so we can detect waveform
//   player.connect(analyser);
// }

// function windowResized () {
//   p5.resizeCanvas(p5.windowWidth, p5.windowHeight);
// }

// function draw() {
//   // Ensure everything is loaded first
//   if (!player || !analyser) return;
  
//   const dim = Math.min(p5.width, p5.height);

//   // Black background
//   // background(0);
  
//   p5.strokeWeight(dim * 0.0175);
//   p5.stroke(255);
//   p5.noFill();
  
  
//   const values = analyser.getValue();
//   const dt = p5.deltaTime / 1000;
//   const power = 250;
//   for (let i = 0; i < amplitudes.length; i++) {
//     // Previous value
//     const a = amplitudes[i];
    
//     // Here we take the decibels and map it to some 0..1 value
//     const minDb = -100;
//     const maxDb = -50;
//     const db = p5.max(minDb, p5.min(maxDb, values[i]));
    
//     // New target (i.e. from audio)
//     const b = inverseLerp(minDb, maxDb, db);
    
//     // Spring toward
//     amplitudes[i] = spring(a, b, power, dt);
//   }

//   // Draw FFT values
//   p5.stroke(255);
//   p5.strokeWeight(dim * 0.0175);
//   p5.noFill();    
//   const maxRadius = dim * 0.3;
//   const minRadius = dim * 0.175;
//   const bands = 10;
//   const L = amplitudes.length;
//   for (let i = 0; i < bands; i++) {
//     const tStart = i / bands;
//     const tEnd = tStart + (1 / bands);
//     const bandStart = p5.min(L, p5.floor(tStart * L));
//     const bandEnd = p5.min(L, p5.floor(tEnd * L));
//     const avg = average(amplitudes, bandStart, bandEnd);

//     const r = minRadius + maxRadius * tStart;

//     // Min and max line thickness
//     const maxThickness = maxRadius / bands * 1;
//     const minThickness = maxRadius / bands * 0.1;
//     const signal = p5.max(0, p5.min(1, avg));
//     const thickness = p5.lerp(minThickness, maxThickness, signal);

//     p5.strokeWeight(thickness);
//     p5.stroke(255);
//     // draw an arc
//     const d = r * 2; // diameter
//     p5.arc(p5.width / 2, p5.height / 2, d, d, 0, p5.PI * 2);
//   }
  
//   // Draw a 'play' or 'stop' button
//   p5.noStroke();
//   p5.fill(255);
//   polygon(p5.width / 2, p5.height / 2, dim * 0.1, playing ? 4 : 3, playing ? p5.PI / 4 : 0);
// }

// function average (list, startIndex, endIndex) {
//   let sum = 0;
//   const count = endIndex - startIndex;
//   if (count <= 0) return 0;
//   for (let i = startIndex; i < endIndex; i++) {
//     sum += list[i];
//   }
//   return sum / count;
// }

// // function mousePressed () {
// //   if (player && player.loaded) {
// //     if (playing) {
// //       playing = false;
// //       player.stop();
// //     } else {
// //       playing = true;
// //       player.restart();
// //     }
// //   }
// // }

// // Inverse of lerp()
// // t = inverseLerp(min, max, current)
// function inverseLerp (min, max, current) {
//   if (Math.abs(min - max) < 1e-10) return 0;
//   else return (current - min) / (max - min);
// }

// // Draw a basic polygon, handles triangles, squares, pentagons, etc
// function polygon(x, y, radius, sides = 3, angle = 0) {
//   p5.beginShape();
//   for (let i = 0; i < sides; i++) {
//     const a = angle + p5.TWO_PI * (i / sides);
//     let sx = x + p5.cos(a) * radius;
//     let sy = y + p5.sin(a) * radius;
//     p5.vertex(sx, sy);
//   }
//   p5.endShape(p5.CLOSE);
// }

// // Springs A toward B with a power, accepting deltaTime
// function spring (a, b, power, dt) {
//   return p5.lerp(a, b, 1 - Math.exp(-power * dt));
// }
